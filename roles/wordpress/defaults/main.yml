---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# -------------------
#   Basic options
# -------------------

# .. envvar:: wordpress_dependencies
#
# Should the ``carlalexander.wordpress`` role manage it's own dependencies (database, web server)?
wordpress_dependencies: True

# .. envvar:: wordpress_install_enabled
#
# Should the ``carlalexander.wordpress`` role install WordPress?
wordpress_install_enabled: True

# .. envvar:: wordpress_password_length
#
# Length of randomly generated passwords (it's a string).
wordpress_password_length: '48'

# .. envvar:: wordpress_user
#
# User that will be used for the WordPress instance.
wordpress_user: 'www-data'

# .. envvar:: wordpress_group
#
# Group that will be used for the WordPress instance.
wordpress_group: 'www-data'


# --------------------------
#   Database configuration
# --------------------------

# .. envvar:: wordpress_mariadb_server
#
# FQDN of the database server.
wordpress_mariadb_server: '{{ ansible_local.mariadb.server
                                 if (ansible_local|d() and ansible_local.mariadb|d() and
                                     ansible_local.mariadb.server|d())
                                 else "127.0.0.1" }}'

# .. envvar:: wordpress_mariadb_databases
#
# When the WordPress database server is used remotely, this variable defines
# the “host” part of the client username.
wordpress_mariadb_client: '{{ mariadb_client }}'

# .. envvar:: wordpress_mariadb_databases
#
# List of databases configured on the WordPress MariaDB server.
wordpress_mariadb_databases:
  - '{{ wordpress_mariadb_database }}'

# .. envvar:: wordpress_mariadb_users
#
# List of user accounts configured on the WordPress MariaDB server.
wordpress_mariadb_users:
  - '{{ wordpress_mariadb_user }}'


# ---------------------------
#   Fail2ban configuration
# ---------------------------

# .. envvar:: wordpress_fail2ban_actions
#
# List of dicts which define custom local ``fail2ban`` actions.
wordpress_fail2ban_actions:
  - '{{ wordpress_fail2ban_action_permanent_ban }}'

# .. envvar:: wordpress_fail2ban_custom_actions
#
# List of custom named actions to perform when a ban is executed.
wordpress_fail2ban_custom_actions:
  'wordpress_permanent_action_': |
    wordpress-permanent[name=%(__name__)s]
  'wordpress_permanent_action_mw': |
    wordpress-permanent[name=%(__name__)s]
    %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
  'wordpress_permanent_action_mwl': |
    wordpress-permanent[name=%(__name__)s]
    %(mta)s-whois-lines[name=%(__name__)s, dest="%(destemail)s", logpath=%(logpath)s]

# .. envvar:: wordpress_fail2ban_default_action
#
# Default action performed by ``fail2ban`` when IP address is banned.
wordpress_fail2ban_default_action: 'action_'

# .. envvar:: wordpress_fail2ban_default_bantime
#
# Default length of time in seconds for the ban to persist. (Default: 2 hours)
wordpress_fail2ban_default_bantime: '{{ 60 * 60 * 2 }}'

# .. envvar:: wordpress_fail2ban_default_findtime
#
# Default length of time in seconds under which the given ``maxretry`` needs
# to happen to trigger a DDOS ban. (Default: 10 minutes)
wordpress_fail2ban_default_findtime: '{{ 60 * 10 }}'

# .. envvar:: wordpress_fail2ban_default_maxretry
#
# Default maximum number of attempts in the given ``findtime`` to trigger
# a ban.
wordpress_fail2ban_default_maxretry: '3'

# .. envvar:: wordpress_fail2ban_enabled
#
# Whether the ``carlalexander.wordpress`` role should install and configure
# fail2ban or not.
wordpress_fail2ban_enabled: True

# .. envvar:: wordpress_fail2ban_filters
#
# List of dicts which define custom local ``fail2ban`` filters.
wordpress_fail2ban_filters:
  - '{{ wordpress_fail2ban_filter_ddos }}'
  - '{{ wordpress_fail2ban_filter_login }}'
  - '{{ wordpress_fail2ban_filter_repeat_bans }}'

# .. envvar:: wordpress_fail2ban_ignoreip
#
# List of IP addresses or CIDR networks which should be ignored by fail2ban.
wordpress_fail2ban_ignoreip: []

# .. envvar:: wordpress_fail2ban_jails
#
# List of dicts which define custom local ``fail2ban`` jails.
wordpress_fail2ban_jails:
  - '{{ wordpress_fail2ban_jail_badbots }}'
  - '{{ wordpress_fail2ban_jail_ddos }}'
  - '{{ wordpress_fail2ban_jail_login }}'
  - '{{ wordpress_fail2ban_jail_permanent }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_action
#
# Action performed by ``fail2ban`` when IP address is banned by the badbots jail.
wordpress_fail2ban_jail_badbots_action: '{{ wordpress_fail2ban_default_action }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_bantime
#
# Length of time in seconds for the badbots jail ban to persist. (Default: 2 hours)
wordpress_fail2ban_jail_badbots_bantime: '{{ wordpress_fail2ban_default_bantime }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_enabled
#
# Whether the badbots jail is enabled or not.
wordpress_fail2ban_jail_badbots_enabled: 'true'

# .. envvar:: wordpress_fail2ban_jail_badbots_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a badbots ban. (Default: 2 hours)
wordpress_fail2ban_jail_badbots_findtime: '{{ wordpress_fail2ban_default_findtime }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a badbots ban.
wordpress_fail2ban_jail_badbots_maxretry: '1'

# .. envvar:: wordpress_fail2ban_jail_ddos_action
#
# Action performed by ``fail2ban`` when IP address is banned by the DDOS jail.
wordpress_fail2ban_jail_ddos_action: '{{ wordpress_fail2ban_default_action }}'

# .. envvar:: wordpress_fail2ban_jail_ddos_bantime
#
# Length of time in seconds for the DDOS jail ban to persist. (Default: 2 hours)
wordpress_fail2ban_jail_ddos_bantime: '{{ wordpress_fail2ban_default_bantime }}'

# .. envvar:: wordpress_fail2ban_jail_ddos_enabled
#
# Whether the DDOS jail is enabled or not.
wordpress_fail2ban_jail_ddos_enabled: 'true'

# .. envvar:: wordpress_fail2ban_jail_ddos_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a DDOS ban. (Default: 5 minutes)
wordpress_fail2ban_jail_ddos_findtime: '300'

# .. envvar:: wordpress_fail2ban_jail_ddos_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a DDOS ban.
wordpress_fail2ban_jail_ddos_maxretry: '300'

# .. envvar:: wordpress_fail2ban_jail_badbots_action
#
# Action performed by ``fail2ban`` when IP address is banned by the login jail.
wordpress_fail2ban_jail_login_action: '{{ wordpress_fail2ban_default_action }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_bantime
#
# Length of time in seconds for the login jail ban to persist. (Default: 10 minutes)
wordpress_fail2ban_jail_login_bantime: '{{ 60 * 10 }}'

# .. envvar:: wordpress_fail2ban_jail_badbots_enabled
#
# Whether the login jail is enabled or not.
wordpress_fail2ban_jail_login_enabled: 'true'

# .. envvar:: wordpress_fail2ban_jail_badbots_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a login ban. (Default: 60 seconds)
wordpress_fail2ban_jail_login_findtime: '60'

# .. envvar:: wordpress_fail2ban_jail_badbots_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a login ban.
wordpress_fail2ban_jail_login_maxretry: '5'

# .. envvar:: wordpress_fail2ban_jail_permanent_action
#
# Action performed by ``fail2ban`` when IP address is banned by the permanent jail.
wordpress_fail2ban_jail_permanent_action: 'wordpress_permanent_{{ wordpress_fail2ban_default_action }}'

# .. envvar:: wordpress_fail2ban_jail_permanent_enabled
#
# Whether the permanent jail is enabled or not.
wordpress_fail2ban_jail_permanent_enabled: 'true'

# .. envvar:: wordpress_fail2ban_jail_permanent_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a permanent ban. (Default: 1 week)
wordpress_fail2ban_jail_permanent_findtime: '{{ 60 * 60 * 24 * 7 }}'

# .. envvar:: wordpress_fail2ban_jail_permanent_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a permanent ban.
wordpress_fail2ban_jail_permanent_maxretry: '10'


# ---------------------------
#   Webserver configuration
# ---------------------------

# .. envvar:: wordpress_nginx_allow
#
# List of IP addresses or network ranges in CIDR format, allowed to access
# WordPress. Leave empty to allow access from all IP addresses/networks
wordpress_nginx_allow: []

# .. envvar:: wordpress_nginx_crt
#
# Relative path to the SSL certificate file used by ``debops.nginx``.
wordpress_nginx_crt: 'certs/{{ wordpress_domain }}.crt'

# .. envvar:: wordpress_nginx_key
#
# Relative path to the SSL key file used by ``debops.nginx``.
wordpress_nginx_key: 'private/{{ wordpress_domain }}.key'

# .. envvar:: wordpress_nginx_server_name
#
# List of domain names that the nginx server responds to.
wordpress_nginx_server_name: [ '{{ wordpress_domain }}' ]


# ---------------------------
#   PHP
# ---------------------------

# .. envvar:: wordpress_php5_packages
#
# Additional PHP packages installed with PHP5
wordpress_php5_packages: [ 'php5-mysqlnd', 'php5-redis', 'php5-mcrypt', 'php5-gd', 'php5-curl', 'php5-dev' ]

# .. envvar:: wordpress_php5_upload_size
#
# Max upload size set in nginx and php5, with amount as M or G.
wordpress_php5_upload_size: '32M'

# .. envvar:: wordpress_php5_max_children
#
# Maximum number of PHP5 processes for WordPress
wordpress_php5_max_children: '10'


# ---------------------------
#   SSL
# ---------------------------

# .. envvar:: wordpress_ssl
#
# Whether our WordPress site is using SSL or not
wordpress_ssl: False

# .. envvar:: wordpress_ssl_crt
#
# Path to the SSL certificate file.
wordpress_ssl_crt: ''

# .. envvar:: wordpress_ssl_key
#
# Path to the SSL key file.
wordpress_ssl_key: ''


# ---------------------------
#   Varnish
# ---------------------------

# .. envvar:: wordpress_varnish_listen
#
# Port that varnish is listening to.
wordpress_varnish_listen: '6081'

# .. envvar:: wordpress_varnish_backend_port
#
# Port used by the varnish backend server (WordPress in this case)
wordpress_varnish_backend_port: '8080'

# .. envvar:: wordpress_varnish_purge_allow
#
# List of IP addresses that are allowed to purge the Varnish cache
wordpress_varnish_purge_allow: [ '{{ ansible_default_ipv4.address }}', '127.0.0.1', '::1' ]

# .. envvar:: wordpress_varnish_purge_condition
#
# Conditions that will run when vcl_recv receives a purge request.
wordpress_varnish_purge_conditions:
  '!std.ip(req.http.X-Real-IP, "0.0.0.0") ~ purge': 'return (synth(405, "This IP is not allowed to send PURGE requests."));'

# .. envvar:: wordpress_varnish_vcl_recv_conditions
#
# Conditions that will run at the end the vcl_recv subroutine
wordpress_varnish_vcl_recv_conditions:
  'req.http.Cookie ~ "wordpress_" || req.http.Cookie ~ "comment_"': 'return (pass);'
  'req.url ~ "wp-(admin|cron|login)" || req.url ~ "preview=true" || req.url ~ "xmlrpc.php"': 'return (pass);'

# .. envvar:: wordpress_varnish_vcl_recv_remove_cookies
#
# List of regular expressions for cookies that need to be removed during the vcl_recv subroutine
wordpress_varnish_vcl_recv_remove_cookies:
  - 'wordpress-settings-[0-9]+?=[^;]+(; )?'
  - 'wordpress-settings-time-[0-9]+?=[^;]+(; )?'
  - 'wordpress_test_cookie=[^;]+(; )?'
  - 'has_js=[^;]+(; )?'
  - '__utm.=[^;]+(; )?'
  - '_ga=[^;]+(; )?'
  - '_gat=[^;]+(; )?'
  - 'utmctr=[^;]+(; )?'
  - 'utmcmd.=[^;]+(; )?'
  - 'utmccn.=[^;]+(; )?'
  - '__gads=[^;]+(; )?'
  - '__qc.=[^;]+(; )?'
  - '__atuv.=[^;]+(; )?'

# .. envvar:: wordpress_varnish_vcl_backend_response_conditions
#
# Conditions that will run at the end the vcl_recv subroutine.
wordpress_varnish_vcl_backend_response_conditions:
  'beresp.http.Set-Cookie && bereq.url !~ "wp-(login|admin)"': 'unset beresp.http.Set-Cookie;'


# ---------------------------
#   WordPress configuration
# ---------------------------

# .. envvar:: wordpress_admin_username
#
# WordPress admin username.
wordpress_admin_username: 'admin'

# .. envvar:: wordpress_admin_email
#
# WordPress admin email.
wordpress_admin_email: '{{ wordpress_admin_username }}@{{ wordpress_domain }}'

# .. envvar:: wordpress_admin_password
#
# Password for the WordPress admin user.
wordpress_admin_password: "{{ lookup('password', secret + '/wordpress/' + wordpress_domain + '/credentials/' + wordpress_admin_username + '/password length=' + wordpress_password_length) }}"

# .. envvar:: wordpress_config_extra_php
#
# Extra PHP code that's appended at the end of the ``wp-confip.php`` file.
wordpress_config_extra_php: ''

# .. envvar:: wordpress_database_host
#
# Hostname or IP address of the WordPress database.
wordpress_database_host: '{{ wordpress_mariadb_server }}'

# .. envvar:: wordpress_database_user
#
# WordPress database user.
wordpress_database_user: 'wordpress'

# .. envvar:: wordpress_database_name
#
# WordPress database name.
wordpress_database_name: 'wordpress'

# .. envvar:: wordpress_database_password
#
# WordPress database password
wordpress_database_password: "{{ lookup('password', secret + '/mariadb/' + ansible_local.mariadb.delegate_to + '/credentials/' + wordpress_database_user + '/password length=' + wordpress_password_length) }}"

# .. envvar:: wordpress_table_prefix
#
# WordPress database table prefix.
wordpress_table_prefix: 'wp_'

# .. envvar:: wordpress_disable_file_edit
#
# Whether to disable file editing or not.
wordpress_disable_file_edit: False

# .. envvar:: wordpress_domain
#
# WordPress URL address
wordpress_domain: '{{ inventory_hostname }}'

# .. envvar:: wordpress_root
#
# WordPress root directory.
wordpress_root: '/var/www/{{ wordpress_domain }}'

# .. envvar:: wordpress_title
#
# WordPress site title
wordpress_title: '{{ wordpress_domain }}'

# .. envvar:: wordpress_plugins
#
# Manage plugins.
#
# There are a few recommended plugins documented in the wiki
# https://github.com/carlalexander/debops-wordpress/wiki/Recommended-plugins.
# They can be installed as shown in the following example.
# Recommended plugins::
#
#     wordpress_plugins:
#       - name: 'akismet'
#       - name: 'varnish-http-purge'
#       - name: 'redis-cache'
#       - name: 'tiny-compress-images'
#       - name: 'ricg-responsive-images'
#
# ``name``
#   Name of the plugin to manage.
#
# ``state``
#   The following state options are supported:
#   latest: Default. Ensure that the latest version of the plugin is installed.
#   present: Ensure that the plugin is installed.
#   absent: Ensure that the plugin is absent.
#
# ``enabled``
#   Should the plugin be enabled? If not given it will be enabled by default.
#
#  ``network``
#   Determines whether the ``enabled`` option applies to the entire multisite
#   network or not. Defaults to True if multisite is enabled. Otherwise, it
#   doesn't do anything.
#
wordpress_plugins: []


# ---------------------------
#   WordPress multisite configuration
# ---------------------------

# .. envvar:: wordpress_multisite
#
# Whether the WordPress installation is multisite or not.
wordpress_multisite: False

# .. envvar:: wordpress_multisite_path
#
# The base path of each site URL in the network.
wordpress_multisite_path: '/'

# .. envvar:: wordpress_multisite_subdomains
#
# Whether to configure the multisite installation using subdomains or not.
wordpress_multisite_subdomains: False
