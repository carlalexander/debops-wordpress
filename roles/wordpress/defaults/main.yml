---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# -------------------
#   Basic options
# -------------------

# .. envvar:: wordpress__dependencies
#
# List of dependencies that the role manages.
wordpress__dependencies:
  - 'composer'
  - 'fail2ban'
  - 'mariadb'
  - 'nginx'
  - 'php'
  - 'pki'
  - 'redis'
  - 'varnish'
  - 'wpcli'

# .. envvar:: wordpress__install_type
#
# The type of WordPress installation. Can be 'bedrock' or 'default'.
wordpress__install_type: 'default'

# .. envvar:: wordpress__password_length
#
# Length of randomly generated passwords (it's a string).
wordpress__password_length: '48'


# --------------------------
#   User configuration
# --------------------------

# .. envvar:: wordpress__user_allow_remote
#
# Whether to allow the WordPress system account to connect remotely or not.
wordpress__user_allow_remote: False

# .. envvar:: wordpress__user_name
#
# Name of the WordPress system user.
wordpress__user_name: 'wordpress'

# .. envvar:: wordpress__user_group
#
# Default system group of the WordPress system user.
wordpress__user_group: '{{ wordpress__user_name }}'


# --------------------------
#  System account configuration
# --------------------------

# .. envvar:: wordpress__users__accounts
#
# List of system accounts to manage.
wordpress__users__accounts:
  - '{{ wordpress__users__account }}'

# .. envvar:: wordpress__users__account_name
#
# Name of the WordPress system account.
wordpress__users__account_name: '{{ wordpress__user_name }}'

# .. envvar:: wordpress__users__account_group
#
# Default system group of the WordPress system account.
wordpress__users__account_group: '{{ wordpress__user_group }}'

# .. envvar:: wordpress__users__account_groups
#
# System groups that the WordPress system account should belong to.
wordpress__users__account_groups: "{{ [ 'sshusers', 'webadmins' ] if wordpress__user_allow_remote else [] }}"

# .. envvar:: wordpress__users__account_home
#
# Path to the home directory of the WordPress system account.
wordpress__users__account_home: "{{ '/home/{{ wordpress__users__account_name }}' if wordpress__user_allow_remote else wordpress__root }}"

# .. envvar:: wordpress__users__account_shell
#
# Default shell to run when the WordPress system account logs in.
wordpress__users__account_shell: "{{ '/bin/bash' if wordpress__user_allow_remote else '/usr/sbin/nologin' }}"

# .. envvar:: wordpress__users__account_create_home
#
# Whether to create a home account for the WordPress system account or not.
wordpress__users__account_create_home: "{{ wordpress__user_allow_remote }}"

# .. envvar:: wordpress__users__account_generate_ssh_key
#
# Whether to whether to generate a SSH key for the WordPress system account or not.
wordpress__users__account_generate_ssh_key: "{{ wordpress__user_allow_remote }}"

# .. envvar:: wordpress__users__account_generate_ssh_key
#
# List of SSH keys configured on the WordPress system account. It takes all
# active keys from your current ssh agent session plus all public keys which you
# keep in the :file:`~/.ssh/` directory of the user which you are using DebOps
# from.
wordpress__users__account_ssh_keys: [ '{{ lookup("pipe","ssh-add -L | grep ^ssh || cat ~/.ssh/*.pub || true") }}' ]


# --------------------------
#   Database configuration
# --------------------------

# .. envvar:: wordpress__mariadb__server
#
# FQDN of the database server.
wordpress__mariadb__server: '{{ ansible_local.mariadb.server
                                 if (ansible_local|d() and ansible_local.mariadb|d() and
                                     ansible_local.mariadb.server|d())
                                 else "127.0.0.1" }}'

# .. envvar:: wordpress__mariadb__client
#
# When the WordPress database server is used remotely, this variable defines
# the “host” part of the client username.
wordpress__mariadb__client: '{{ mariadb__client }}'

# .. envvar:: wordpress__mariadb__databases
#
# List of databases configured on the WordPress MariaDB server.
wordpress__mariadb__databases:
  - '{{ wordpress__mariadb__database }}'

# .. envvar:: wordpress__mariadb__users
#
# List of user accounts configured on the WordPress MariaDB server.
wordpress__mariadb__users:
  - '{{ wordpress__mariadb__user }}'


# ---------------------------
#   Fail2ban configuration
# ---------------------------

# .. envvar:: wordpress__fail2ban__actions
#
# List of dicts which define custom local ``fail2ban`` actions.
wordpress__fail2ban__actions:
  - '{{ wordpress__fail2ban__action_permanent_ban }}'

# .. envvar:: wordpress__fail2ban__custom_actions
#
# List of custom named actions to perform when a ban is executed.
wordpress__fail2ban__custom_actions:
  'wordpress_permanent_action_': |
    wordpress-permanent[name=%(__name__)s]
  'wordpress_permanent_action_mw': |
    wordpress-permanent[name=%(__name__)s]
    %(mta)s-whois[name=%(__name__)s, dest="%(destemail)s"]
  'wordpress_permanent_action_mwl': |
    wordpress-permanent[name=%(__name__)s]
    %(mta)s-whois-lines[name=%(__name__)s, dest="%(destemail)s", logpath=%(logpath)s]

# .. envvar:: wordpress__fail2ban__default_action
#
# Default action performed by ``fail2ban`` when IP address is banned.
wordpress__fail2ban__default_action: 'action_'

# .. envvar:: wordpress__fail2ban__default_bantime
#
# Default length of time in seconds for the ban to persist. (Default: 2 hours)
wordpress__fail2ban__default_bantime: '{{ 60 * 60 * 2 }}'

# .. envvar:: wordpress__fail2ban__default_findtime
#
# Default length of time in seconds under which the given ``maxretry`` needs
# to happen to trigger a DDOS ban. (Default: 10 minutes)
wordpress__fail2ban__default_findtime: '{{ 60 * 10 }}'

# .. envvar:: wordpress__fail2ban__default_maxretry
#
# Default maximum number of attempts in the given ``findtime`` to trigger
# a ban.
wordpress__fail2ban__default_maxretry: '3'

# .. envvar:: wordpress__fail2ban__filters
#
# List of dicts which define custom local ``fail2ban`` filters.
wordpress__fail2ban__filters:
  - '{{ wordpress__fail2ban__filter_ddos }}'
  - '{{ wordpress__fail2ban__filter_login }}'
  - '{{ wordpress__fail2ban__filter_repeat_bans }}'

# .. envvar:: wordpress__fail2ban__ignoreip
#
# List of IP addresses or CIDR networks which should be ignored by fail2ban.
wordpress__fail2ban__ignoreip: [ '{{ ansible_default_ipv4.address }}' ]

# .. envvar:: wordpress__fail2ban__jails
#
# List of dicts which define custom local ``fail2ban`` jails.
wordpress__fail2ban__jails:
  - '{{ wordpress__fail2ban__jail_badbots }}'
  - '{{ wordpress__fail2ban__jail_ddos }}'
  - '{{ wordpress__fail2ban__jail_login }}'
  - '{{ wordpress__fail2ban__jail_permanent }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_action
#
# Action performed by ``fail2ban`` when IP address is banned by the badbots jail.
wordpress__fail2ban__jail_badbots_action: '{{ wordpress__fail2ban__default_action }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_bantime
#
# Length of time in seconds for the badbots jail ban to persist. (Default: 2 hours)
wordpress__fail2ban__jail_badbots_bantime: '{{ wordpress__fail2ban__default_bantime }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_enabled
#
# Whether the badbots jail is enabled or not.
wordpress__fail2ban__jail_badbots_enabled: 'true'

# .. envvar:: wordpress__fail2ban__jail_badbots_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a badbots ban. (Default: 2 hours)
wordpress__fail2ban__jail_badbots_findtime: '{{ wordpress__fail2ban__default_findtime }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a badbots ban.
wordpress__fail2ban__jail_badbots_maxretry: '1'

# .. envvar:: wordpress__fail2ban__jail_ddos_action
#
# Action performed by ``fail2ban`` when IP address is banned by the DDOS jail.
wordpress__fail2ban__jail_ddos_action: '{{ wordpress__fail2ban__default_action }}'

# .. envvar:: wordpress__fail2ban__jail_ddos_bantime
#
# Length of time in seconds for the DDOS jail ban to persist. (Default: 2 hours)
wordpress__fail2ban__jail_ddos_bantime: '{{ wordpress__fail2ban__default_bantime }}'

# .. envvar:: wordpress__fail2ban__jail_ddos_enabled
#
# Whether the DDOS jail is enabled or not.
wordpress__fail2ban__jail_ddos_enabled: 'true'

# .. envvar:: wordpress__fail2ban__jail_ddos_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a DDOS ban. (Default: 5 minutes)
wordpress__fail2ban__jail_ddos_findtime: '300'

# .. envvar:: wordpress__fail2ban__jail_ddos_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a DDOS ban.
wordpress__fail2ban__jail_ddos_maxretry: '300'

# .. envvar:: wordpress__fail2ban__jail_badbots_action
#
# Action performed by ``fail2ban`` when IP address is banned by the login jail.
wordpress__fail2ban__jail_login_action: '{{ wordpress__fail2ban__default_action }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_bantime
#
# Length of time in seconds for the login jail ban to persist. (Default: 10 minutes)
wordpress__fail2ban__jail_login_bantime: '{{ 60 * 10 }}'

# .. envvar:: wordpress__fail2ban__jail_badbots_enabled
#
# Whether the login jail is enabled or not.
wordpress__fail2ban__jail_login_enabled: 'true'

# .. envvar:: wordpress__fail2ban__jail_badbots_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a login ban. (Default: 60 seconds)
wordpress__fail2ban__jail_login_findtime: '60'

# .. envvar:: wordpress__fail2ban__jail_badbots_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a login ban.
wordpress__fail2ban__jail_login_maxretry: '5'

# .. envvar:: wordpress__fail2ban__jail_permanent_action
#
# Action performed by ``fail2ban`` when IP address is banned by the permanent jail.
wordpress__fail2ban__jail_permanent_action: 'wordpress_permanent_{{ wordpress__fail2ban__default_action }}'

# .. envvar:: wordpress__fail2ban__jail_permanent_enabled
#
# Whether the permanent jail is enabled or not.
wordpress__fail2ban__jail_permanent_enabled: 'true'

# .. envvar:: wordpress__fail2ban__jail_permanent_findtime
#
# Length of time in seconds under which the given ``maxretry`` needs to happen
# to trigger a permanent ban. (Default: 1 week)
wordpress__fail2ban__jail_permanent_findtime: '{{ 60 * 60 * 24 * 7 }}'

# .. envvar:: wordpress__fail2ban__jail_permanent_maxretry
#
# Maximum number of requests in the given ``findtime`` to trigger a permanent ban.
wordpress__fail2ban__jail_permanent_maxretry: '10'

# .. envvar:: wordpress__fail2ban__loglevel
#
# Fail2ban log verbosity.
wordpress__fail2ban__loglevel: 'NOTICE'


# ---------------------------
#   Webserver configuration
# ---------------------------

# .. envvar:: wordpress__nginx__acme_root
#
# Global directory where ACME challenges will be served from.
wordpress__nginx__acme_root: '{{ wordpress__nginx__www }}/acme'

# .. envvar:: wordpress__nginx__location_allow
#
# List of IP addresses or network ranges in CIDR format, allowed to access
# WordPress. Leave empty to allow access from all IP addresses/networks.
wordpress__nginx__location_allow: []

# .. envvar:: wordpress__nginx__csp
#
# Determines the Content-Security-Policy header configured in the WordPress vhost.
# By default, blocks all non-https content.
wordpress__nginx__csp: "default-src https:; script-src https: 'unsafe-eval' 'unsafe-inline'; style-src https: 'unsafe-inline'"

# .. envvar:: wordpress__nginx__csp_enabled
#
# Whether the WordPress vhost will use the Content-Security-Policy header or not.
wordpress__nginx__csp_enabled: False

# .. envvar:: wordpress__nginx__listen
#
# Default listen port for HTTP connections used by ``debops.nginx``.
wordpress__nginx__listen: [ '[::]:80' ]

# .. envvar:: wordpress__nginx__listen_ssl
#
# Default listen port for HTTPS connections used by ``debops.nginx``.
wordpress__nginx__listen_ssl: [ '[::]:443' ]

# .. envvar:: wordpress__nginx__pki_realm
#
# Default PKI realm used by ``debops.nginx``.
wordpress__nginx__pki_realm: '{{ wordpress__pki__realm }}'

# .. envvar:: wordpress__nginx__redirect_from
#
# List of domain names that the nginx server will redirect to the WordPress site.
wordpress__nginx__redirect_from: "{{ [ 'www.' + wordpress__domain ] if wordpress__domain == ansible_domain else [] }}"

# .. envvar:: wordpress__nginx__server_name
#
# List of domain names that the nginx server responds to.
wordpress__nginx__server_name: "{{ [ wordpress__domain, 'www.' + wordpress__domain ] if wordpress__domain == ansible_domain else [ wordpress__domain ] }}"

# .. envvar:: wordpress__nginx__server_root
#
# Root of the nginx server.
wordpress__nginx__server_root: "{{ wordpress__root + '/web' if wordpress__install_type == 'bedrock' else wordpress__root }}"

# .. envvar:: wordpress__nginx__upstream_php_name
#
# Name of the nginx PHP upstream.
wordpress__nginx__upstream_php_name: 'php-{{ wordpress__php__pool_name }}'

# .. envvar:: wordpress__nginx__upstream_varnish_name
#
# Name of the nginx varnish upstream.
wordpress__nginx__upstream_varnish_name: 'varnish'

# .. envvar:: wordpress__nginx__user
#
# System user used by nginx.
wordpress__nginx__user: 'www-data'

# .. envvar:: wordpress__nginx__www
#
# Base path for nginx root directories.
wordpress__nginx__www: '/var/www'


# ---------------------------
#   PHP
# ---------------------------

# .. envvar:: wordpress__php__max_children
#
# Maximum number of PHP processes for WordPress.
wordpress__php__max_children: '10'

# .. envvar:: wordpress__php__packages
#
# Additional PHP packages installed with PHP.
wordpress__php__packages: [ 'mysql', 'curl', 'dev', 'redis', 'xml' ]

# .. envvar:: wordpress__php__pool_name
#
# Name of the php-fpm pool used by WordPress.
wordpress__php__pool_name: '{{ wordpress__php__pool_user }}'

# .. envvar:: wordpress__php__pool_user
#
# System user used by the php-fpm pool used by WordPress.
wordpress__php__pool_user: '{{ wordpress__user_name }}'

# .. envvar:: wordpress__php__memory_limit
#
# Maximum memory limit for PHP processes.
wordpress__php__memory_limit: '128M'

# .. envvar:: wordpress__php__post_max_size
#
# Maximum size of the POST data, with amount as M or G.
wordpress__php__post_max_size: '32M'

# .. envvar:: wordpress__php__request_terminate_timeout
#
# Specify maximum request time after which the WordPress worker process
# will be killed.
wordpress__php__request_terminate_timeout: '60'


# ---------------------------
#   PKI
# ---------------------------

# .. envvar:: wordpress__pki__acme_challenge_dir
#
# Path to global ACME challenge directory.
wordpress__pki__acme_challenge_dir: '{{ wordpress__nginx__acme_root }}/.well-known/acme-challenge'

# .. envvar:: wordpress__pki__acme_group
#
# Name of the system group which will be used to interact with the ACME
# Certificate Authority.
wordpress__pki__acme_group: '{{ wordpress__pki__acme_user }}'

# .. envvar:: wordpress__pki__acme_user
#
# Name of the system account which will be used to interact with the ACME
# Certificate Authority.
wordpress__pki__acme_user: 'pki-acme'

# .. envvar:: wordpress__pki__realm
#
# PKI realm used by WordPress.
wordpress__pki__realm: '{{ wordpress__pki__default_realm_name }}'

# .. envvar:: wordpress__pki__default_realm_name
#
# Default name of the PKI realm used by WordPress.
wordpress__pki__default_realm_name: '{{ wordpress__domain }}'

# .. envvar:: wordpress__pki__default_realm_subdomains
#
# Subdomains configured in the default PKI realm used by WordPress.
wordpress__pki__default_realm_subdomains: "{{ [ 'www' ] if wordpress__domain == ansible_domain else [] }}"

# .. envvar:: wordpress__pki__host_realms
#
# List of PKI realms configured with WordPress.
wordpress__pki__host_realms:
  - '{{ wordpress__pki__default_realm }}'


# ---------------------------
#   Redis
# ---------------------------

# .. envvar:: wordpress__redis__auth_password
#
# Password used to authenticate with the redis server.
wordpress__redis__auth_password: ''


# ---------------------------
#   SSL
# ---------------------------

# .. envvar:: wordpress__ssl
#
# Whether our WordPress site is using SSL or not.
wordpress__ssl: False

# .. envvar:: wordpress__ssl_provider
#
# The SSL certificate provider. Can be 'letsencrypt', 'manual' or 'selfsigned'.
wordpress__ssl_provider: 'letsencrypt'

# .. envvar:: wordpress__ssl_crt
#
# Path to the SSL certificate file when using the 'manual' SSL certificate provider.
wordpress__ssl_crt: ''

# .. envvar:: wordpress__ssl_key
#
# Path to the SSL key file when using the 'manual' SSL certificate provider.
wordpress__ssl_key: ''


# ---------------------------
#   Varnish
# ---------------------------

# .. envvar:: wordpress__varnish__listen
#
# Port that varnish is listening to.
wordpress__varnish__listen: '6081'

# .. envvar:: wordpress__varnish__backend_port
#
# Port used by the varnish backend server (WordPress in this case)
wordpress__varnish__backend_port: '8080'

# .. envvar:: wordpress__varnish__add_ban_lurker_headers
#
# Whether to add ban lurker headers to backend response. These headers are the primary mechanism
# used by the Varnish ban lurker to clear out banned cache objects.
wordpress__varnish__add_ban_lurker_headers: False

# .. envvar:: wordpress__varnish__normalize_query_parameters
#
# Normalizing query parameters lets Varnish cache variations of the same URL.
# This might cause some issues with some script minimization systems.
wordpress__varnish__normalize_query_parameters: False

# .. envvar:: wordpress__varnish__purge_allow
#
# List of IP addresses that are allowed to purge the Varnish cache
wordpress__varnish__purge_allow: [ '{{ ansible_default_ipv4.address }}', '127.0.0.1', '::1' ]

# .. envvar:: wordpress__varnish__purge_condition
#
# Dictionary of conditions that will run when vcl_recv receives a purge request.
wordpress__varnish__purge_conditions: {}

# .. envvar:: wordpress__varnish__vcl_backend_response_conditions
#
# Dictionary of conditions that will run at the end the vcl_recv subroutine.
wordpress__varnish__vcl_backend_response_conditions: {}

# .. envvar:: wordpress__varnish__vcl_recv_conditions
#
# Dictionary of conditions that will run at the end the vcl_recv subroutine
wordpress__varnish__vcl_recv_conditions: {}

# .. envvar:: wordpress__varnish__vcl_recv_remove_cookies
#
# List of regular expressions for cookies that need to be removed during the vcl_recv subroutine
wordpress__varnish__vcl_recv_remove_cookies:
  - 'wordpress-settings-[0-9]+?=[^;]+(; )?'
  - 'wordpress-settings-time-[0-9]+?=[^;]+(; )?'
  - 'wordpress_test_cookie=[^;]+(; )?'
  - 'has_js=[^;]+(; )?'
  - '__utm.=[^;]+(; )?'
  - '_ga=[^;]+(; )?'
  - '_gat=[^;]+(; )?'
  - 'utmctr=[^;]+(; )?'
  - 'utmcmd.=[^;]+(; )?'
  - 'utmccn.=[^;]+(; )?'
  - '__gads=[^;]+(; )?'
  - '__qc.=[^;]+(; )?'
  - '__atuv.=[^;]+(; )?'


# ---------------------------
#   WordPress configuration
# ---------------------------

# .. envvar:: wordpress__admin_username
#
# WordPress admin username.
wordpress__admin_username: 'admin'

# .. envvar:: wordpress__admin_email
#
# WordPress admin email.
wordpress__admin_email: '{{ wordpress__admin_username }}@{{ wordpress__domain }}'

# .. envvar:: wordpress__admin_password
#
# Password for the WordPress admin user.
wordpress__admin_password: "{{ lookup('password', secret + '/wordpress/' + wordpress__domain + '/credentials/' + wordpress__admin_username + '/password length=' + wordpress__password_length) }}"

# .. envvar:: wordpress__config_disable_wp_cron
#
# Whether to disable WordPress calls to wp-cron.php or not.
wordpress__config_disable_wp_cron: '{{ wordpress__cron_enabled }}'

# .. envvar:: wordpress__config_disable_file_edit
#
# Whether to disable file editing or not.
wordpress__config_disable_file_edit: False

# .. envvar:: wordpress__config_extra_php
#
# Extra PHP code that's appended at the end of the ``wp-confip.php`` file.
wordpress__config_extra_php: ''

# .. envvar:: wordpress__cron_enabled
#
# Whether the wp-cron cron job is enabled or not.
wordpress__cron_enabled: True

# .. envvar:: wordpress__cron_minute
#
# Minute when wp-cron cron job should run.
wordpress__cron_minute: '*'

# .. envvar:: wordpress__cron_minute
#
# Hour when wp-cron cron job should run.
wordpress__cron_hour: '*'

# .. envvar:: wordpress__database_host
#
# Hostname or IP address of the WordPress database.
wordpress__database_host: '{{ wordpress__mariadb__server }}'

# .. envvar:: wordpress__database_user
#
# WordPress database user.
wordpress__database_user: 'wordpress'

# .. envvar:: wordpress__database_name
#
# WordPress database name.
wordpress__database_name: 'wordpress'

# .. envvar:: wordpress__database_password
#
# WordPress database password
wordpress__database_password: "{{ lookup('password', secret + '/mariadb/' + ansible_local.mariadb.delegate_to + '/credentials/' + wordpress__database_user + '/password length=' + wordpress__password_length) }}"

# .. envvar:: wordpress__table_prefix
#
# WordPress database table prefix.
wordpress__table_prefix: 'wp_'

# .. envvar:: wordpress__domain
#
# WordPress URL address
wordpress__domain: '{{ inventory_hostname }}'

# .. envvar:: wordpress__root
#
# WordPress root directory.
wordpress__root: '{{ wordpress__nginx__www }}/{{ wordpress__domain }}'

# .. envvar:: wordpress__title
#
# WordPress site title
wordpress__title: '{{ wordpress__domain }}'

# .. envvar:: wordpress__permalink_structure
#
# WordPress permalink structure
wordpress__permalink_structure: '/%postname%/'

# .. envvar:: wordpress__plugins
#
# Manage plugins.
#
# There are a few recommended plugins documented in the wiki
# https://github.com/carlalexander/debops-wordpress/wiki/Recommended-plugins.
# They can be installed as shown in the following example.
# Recommended plugins::
#
#     wordpress__plugins:
#       - name: 'akismet'
#       - name: 'varnish-http-purge'
#       - name: 'redis-cache'
#       - name: 'tiny-compress-images'
#       - name: 'ricg-responsive-images'
#
# ``name``
#   Name of the plugin to manage.
#
# ``state``
#   The following state options are supported:
#   latest: Default. Ensure that the latest version of the plugin is installed.
#   present: Ensure that the plugin is installed.
#   absent: Ensure that the plugin is absent.
#
# ``enabled``
#   Should the plugin be enabled? If not given it will be enabled by default.
#
#  ``network``
#   Determines whether the ``enabled`` option applies to the entire multisite
#   network or not. Defaults to True if multisite is enabled. Otherwise, it
#   doesn't do anything.
#
wordpress__plugins: []


# ---------------------------
#   WordPress multisite configuration
# ---------------------------

# .. envvar:: wordpress__multisite
#
# Whether the WordPress installation is multisite or not.
wordpress__multisite: False

# .. envvar:: wordpress__multisite_path
#
# The base path of each site URL in the network.
wordpress__multisite_path: '/'

# .. envvar:: wordpress__multisite_subdomains
#
# Whether to configure the multisite installation using subdomains or not.
wordpress__multisite_subdomains: False
