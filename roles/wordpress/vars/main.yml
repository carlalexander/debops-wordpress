---

# --------------------------
#   Fail2ban configuration
# --------------------------

wordpress__fail2ban__action_permanent_ban:
  name: 'wordpress-permanent'
  start: cat /etc/fail2ban/wordpress-banlist.<name> | while read IP; do ip route list | grep -q "unreachable $IP" || ip route add unreachable $IP; done
  stop: touch /etc/fail2ban/wordpress-banlist.<name>
  check: test -e /etc/fail2ban/wordpress-banlist.<name>
  ban: |
    FILE=/etc/fail2ban/wordpress-banlist.<name>
    grep -q "<ip>" "$FILE" || ip route list | grep -q 'unreachable <ip>' || ip route add unreachable <ip>
    grep -q "<ip>" "$FILE" || echo "<ip>" >> "$FILE"

wordpress__fail2ban__filter_ddos:
  name: 'wordpress-ddos'
  failregex: '^<HOST> .* "(GET|POST)'

wordpress__fail2ban__filter_login:
  name: 'wordpress-login'
  failregex: '^<HOST> .* "POST .*?/(wp-login|xmlrpc).php'

wordpress__fail2ban__filter_repeat_bans:
  name: 'wordpress-repeat-bans'
  failregex: 'fail2ban\.actions.+NOTICE\s+\[(?:.*)\]\s+Ban\s+<HOST>'
  ignoreregex: 'fail2ban\.actions.+NOTICE\s+\[wordpress-permanent\]\s+Ban\s+<HOST>'

wordpress__fail2ban__jail_badbots:
  name: 'wordpress-badbots'
  enabled: '{{ wordpress__fail2ban__jail_badbots_enabled }}'
  action: '{{ wordpress__fail2ban__jail_badbots_action }}'
  filter: 'apache-badbots'
  port: 'http,https'
  logpath: '/var/log/nginx/varnish*access.log'
  findtime: '{{ wordpress__fail2ban__jail_badbots_findtime }}'
  maxretry: '{{ wordpress__fail2ban__jail_badbots_maxretry }}'
  bantime: '{{ wordpress__fail2ban__jail_badbots_bantime }}'

wordpress__fail2ban__jail_ddos:
  name: 'wordpress-ddos'
  enabled: '{{ wordpress__fail2ban__jail_ddos_enabled }}'
  action: '{{ wordpress__fail2ban__jail_ddos_action }}'
  filter: 'wordpress-ddos'
  port: 'http,https'
  logpath: '/var/log/nginx/varnish*access.log'
  findtime: '{{ wordpress__fail2ban__jail_ddos_findtime }}'
  maxretry: '{{ wordpress__fail2ban__jail_ddos_maxretry }}'
  bantime: '{{ wordpress__fail2ban__jail_ddos_bantime }}'

wordpress__fail2ban__jail_login:
  name: 'wordpress-login'
  enabled: '{{ wordpress__fail2ban__jail_login_enabled }}'
  action: '{{ wordpress__fail2ban__jail_login_action }}'
  filter: 'wordpress-login'
  port: 'http,https'
  logpath: '/var/log/nginx/varnish*access.log'
  findtime: '{{ wordpress__fail2ban__jail_login_findtime }}'
  maxretry: '{{ wordpress__fail2ban__jail_login_maxretry }}'
  bantime: '{{ wordpress__fail2ban__jail_login_bantime }}'

wordpress__fail2ban__jail_permanent:
  name: 'wordpress-permanent'
  enabled: '{{ wordpress__fail2ban__jail_permanent_enabled }}'
  action: '{{ wordpress__fail2ban__jail_permanent_action }}'
  filter: 'wordpress-repeat-bans'
  logpath: '/var/log/fail2ban.log'
  findtime: '{{ wordpress__fail2ban__jail_permanent_findtime }}'
  maxretry: '{{ wordpress__fail2ban__jail_permanent_maxretry }}'
  bantime: '-1'


# --------------------------
#   MariaDB configuration
# --------------------------

wordpress__mariadb__database:
  name: '{{ wordpress__database_name }}'

wordpress__mariadb__user:
  name: '{{ wordpress__database_user }}'
  password: '{{ wordpress__database_password }}'
  host: '{{ wordpress__mariadb__client }}'
  priv: '{{ wordpress__database_name }}.*:ALL'
  state: 'present'


# --------------------------
#   PHP configuration
# --------------------------

wordpress__php__pool:
  enabled: True
  name: '{{ wordpress__php__pool_name }}'
  owner: '{{ wordpress__php__pool_user }}'
  pm_max_children: '{{ wordpress__php__max_children }}'
  request_terminate_timeout: '{{ wordpress__php__request_terminate_timeout }}'


# --------------------------
#   PKI configuration
# --------------------------

wordpress__pki__default_realm:
  name: '{{ wordpress__pki__default_realm_name }}'
  acme: "{{ wordpress__ssl_provider == 'letsencrypt' }}"
  acme_challenge_dir: '{{ wordpress__pki__acme_challenge_dir }}'
  acme_default_subdomains: '{{ wordpress__pki__default_realm_subdomains }}'
  acme_subdomains: '{{ wordpress__pki__default_realm_subdomains }}'
  default_subdomains: '{{ wordpress__pki__default_realm_subdomains }}'
  subdomains: '{{ wordpress__pki__default_realm_subdomains }}'

wordpress__pki__private_files:
  - src: '{{ wordpress__ssl_key }}'
    dest: '/etc/pki/realms/{{ wordpress__pki__realm }}/private/key.pem'

wordpress__pki__public_files:
  - src: '{{ wordpress__ssl_crt }}'
    dest: '/etc/pki/realms/{{ wordpress__pki__realm }}/external/cert.pem'


# --------------------------
#   nginx server configuration
# --------------------------

wordpress__nginx__server_backend:
  by_role: 'carlalexander.wordpress'
  enabled: True
  default: False
  type: 'php'
  listen: [ '{{ wordpress__varnish__backend_port }}' ]
  ssl: False
  acme: False
  filename: '{{ wordpress__domain }}'
  name: '{{ wordpress__nginx__server_name }}'
  root: '{{ wordpress__nginx__server_root }}'

  options: |
    client_max_body_size  {{ wordpress__php__post_max_size }};
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types application/atom+xml
      application/javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rdf+xml
      application/rss+xml
      application/schema+json
      application/vnd.geo+json
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-javascript
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/eot
      font/opentype
      image/bmp
      image/svg+xml
      image/vnd.microsoft.icon
      image/x-icon
      text/cache-manifest
      text/css
      text/javascript
      text/plain
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy
      text/xml;

    rewrite /wp-admin$ $scheme://$host$uri/ permanent;
    {% if wordpress__install_type == 'bedrock' %}
    rewrite ^/(wp-.*.php)$ /wp/$1 last;
    rewrite ^/(wp-(content|admin|includes).*) /wp/$1 last;
    {% endif %}
    {% if wordpress__multisite and not wordpress__multisite_subdomains %}

    if (!-e $request_filename) {
      rewrite ^(/[^/]+)?(/wp-.*) {% if wordpress__install_type == 'bedrock' %}/wp{% endif %}$2 last;
      rewrite ^(/[^/]+)?(/.*\.php) {% if wordpress__install_type == 'bedrock' %}/wp{% endif %}$2 last;
    }
    {% endif %}

  location:
    '/': 'try_files $uri $uri/ /index.php?$args;'

    '~ /(\.|wp-config.php|readme.html|license.txt|wp-cli.local.yml|wp-cli.yml)': 'return 404;'

    '= /robots.txt': |
      access_log off;
      log_not_found off;
      try_files /robots.txt /index.php;

    '~* ^.+\.(css|js|ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$': |
      access_log off;
      expires max;
      add_header Cache-Control "public";

  php_upstream: '{{ wordpress__nginx__upstream_php_name }}'

  php_options: |
    set $php_https off;

    if ($http_x_forwarded_proto = "https") {
      set $php_https on;
    }

    fastcgi_param HTTPS $php_https;
    fastcgi_next_upstream error timeout invalid_header http_500;

wordpress__nginx__server_varnish:
  by_role: 'carlalexander.wordpress'
  type: 'proxy'
  enabled: True
  default: False
  filename: 'varnish.{{ wordpress__domain }}'
  name: '{{ wordpress__nginx__server_name }}'
  root: False
  listen: '{{ wordpress__nginx__listen }}'
  listen_ssl: '{{ wordpress__nginx__listen_ssl }}'
  redirect_from: '{{ wordpress__nginx__redirect_from }}'
  redirect_code: '301'
  ssl: '{{ wordpress__ssl }}'
  acme: '{{ wordpress__ssl_provider == "letsencrypt" }}'
  csp: '{{ wordpress__nginx__csp }}'
  csp_enabled: '{{ wordpress__nginx__csp_enabled|bool }}'
  ocsp_verify: False
  deny_hidden: False
  favicon: False
  proxy_pass: 'http://{{ wordpress__nginx__upstream_varnish_name }}'

  options: |
    client_max_body_size  {{ wordpress__php__post_max_size }};

    if ($host != $server_name) {
        return 444;
    }

  location_allow:
    '/': '{{ wordpress__nginx__location_allow }}'


# --------------------------
#   nginx upstream configuration
# --------------------------

wordpress__nginx__upstream_php:
  enabled: True
  name: '{{ wordpress__nginx__upstream_php_name }}'
  server:
   - 'unix:/var/run/php7.0-fpm-{{ wordpress__php__pool_name }}.sock'

wordpress__nginx__upstream_varnish:
  enabled: True
  name: '{{ wordpress__nginx__upstream_varnish_name }}'
  server:
   - '127.0.0.1:{{ wordpress__varnish__listen }}'
   - '127.0.0.1:{{ wordpress__varnish__backend_port }} backup'


# --------------------------
#   System account configuration
# --------------------------

wordpress__users__account:
  name: '{{ wordpress__users__account_name }}'
  group: '{{ wordpress__users__account_group }}'
  groups: '{{ wordpress__users__account_groups }}'
  system: True
  home: '{{ wordpress__users__account_home }}'
  shell: '{{ wordpress__users__account_shell }}'
  createhome: '{{ wordpress__users__account_create_home }}'
  generate_ssh_key: '{{ wordpress__users__account_generate_ssh_key }}'
  sshkeys: '{{ wordpress__users__account_ssh_keys }}'
  sshkeys_exclusive: True

# --------------------------
#   Varnish configuration
# --------------------------

wordpress__varnish__backend:
  name: 'wordpress'
  port: '{{ wordpress__varnish__backend_port }}'
  probe: False

wordpress__varnish__purge_conditions_default:
  '!std.ip(req.http.X-Real-IP, "0.0.0.0") ~ purge': 'return (synth(405, "This IP is not allowed to send PURGE requests."));'

wordpress__varnish__vcl_backend_response_conditions_default:
  'beresp.http.Set-Cookie && bereq.url !~ "wp-(login|admin)"': 'unset beresp.http.Set-Cookie;'

wordpress__varnish__vcl_recv_conditions_default:
  'req.http.Cookie ~ "wordpress_" || req.http.Cookie ~ "comment_"': 'return (pass);'
  'req.url ~ "wp-(admin|cron|login)" || req.url ~ "preview=true" || req.url ~ "xmlrpc.php"': 'return (pass);'
